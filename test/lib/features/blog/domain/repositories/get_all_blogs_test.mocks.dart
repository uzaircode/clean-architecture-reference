// Mocks generated by Mockito 5.4.4 from annotations
// in clean_architecture_rivaan/test/lib/features/blog/domain/repositories/get_all_blogs_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i7;

import 'package:clean_architecture_rivaan/core/error/failures.dart' as _i5;
import 'package:clean_architecture_rivaan/features/blog/domain/entities/blog.dart'
    as _i6;
import 'package:fpdart/fpdart.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

import 'get_all_blogs_test.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MockBlogRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockBlogRepository extends _i1.Mock
    implements _i2.MockBlogRepository {
  MockMockBlogRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i6.Blog>> uploadBlog({
    required _i7.File? image,
    required String? title,
    required String? content,
    required String? userId,
    required List<String>? topics,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadBlog,
          [],
          {
            #image: image,
            #title: title,
            #content: content,
            #userId: userId,
            #topics: topics,
          },
        ),
        returnValue: _i3.Future<_i4.Either<_i5.Failure, _i6.Blog>>.value(
            _i8.dummyValue<_i4.Either<_i5.Failure, _i6.Blog>>(
          this,
          Invocation.method(
            #uploadBlog,
            [],
            {
              #image: image,
              #title: title,
              #content: content,
              #userId: userId,
              #topics: topics,
            },
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.Failure, _i6.Blog>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, List<_i6.Blog>>> getAllBlogs() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllBlogs,
          [],
        ),
        returnValue: _i3.Future<_i4.Either<_i5.Failure, List<_i6.Blog>>>.value(
            _i8.dummyValue<_i4.Either<_i5.Failure, List<_i6.Blog>>>(
          this,
          Invocation.method(
            #getAllBlogs,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.Failure, List<_i6.Blog>>>);
}
